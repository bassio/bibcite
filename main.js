/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BibcitePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// CitationSuggest.ts
var import_obsidian = require("obsidian");

// ZoteroFunctions.ts
var http = require("http");
function makeHttpRequest(options, data) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = "";
      res.on("data", (chunk) => {
        responseData += chunk;
      });
      res.on("end", () => {
        resolve(responseData);
      });
    });
    req.on("error", (error) => {
      reject(error);
    });
    if (data) {
      req.write(data);
    }
    req.end();
  });
}
async function locateCollection(collectionPath) {
  const jsonRpcData = {
    jsonrpc: "2.0",
    method: "user.groups",
    params: [true]
  };
  const options = {
    hostname: "localhost",
    port: 23119,
    path: "/better-bibtex/json-rpc",
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": JSON.stringify(jsonRpcData).length
    }
  };
  const responseStr = await makeHttpRequest(options, JSON.stringify(jsonRpcData));
  const responseJson = JSON.parse(responseStr);
  const result = responseJson.result;
  const plist = collectionPath.split("/");
  const lib = plist[0];
  const after = plist.slice(1);
  const libNames = result.map((l) => l.name);
  const libIds = result.map((l) => l.id);
  const matchedLib = result[libNames.indexOf(lib)];
  const matchedLibId = libIds[libNames.indexOf(lib)];
  const allCollections = matchedLib.collections;
  const allCollectionsDict = {};
  allCollections.forEach((c) => {
    allCollectionsDict[c.key] = { ...c, children: [] };
  });
  const topCollections = allCollections.filter((c) => !c.parentCollection);
  const topCollectionsDict = {};
  topCollections.forEach((c) => {
    topCollectionsDict[c.key] = { ...c, children: [] };
  });
  const nonTopCollections = matchedLib.collections.filter((c) => c.parentCollection !== false);
  for (const coll of nonTopCollections) {
    if (coll.parentCollection in topCollectionsDict) {
      topCollectionsDict[coll.parentCollection].children.push(coll);
    }
  }
  const matchedTopCollection = topCollections.find((c) => c.name === after[0]);
  const matchedTopCollectionKey = matchedTopCollection.key;
  let children = Object.values(allCollectionsDict).filter((c) => c.parentCollection === matchedTopCollectionKey);
  let matchedChildCollectionKey = null;
  for (const cname of after.slice(1)) {
    if (matchedChildCollectionKey) {
      children = Object.values(allCollectionsDict).filter((c) => c.parentCollection === matchedChildCollectionKey);
    }
    for (const child of children) {
      if (cname === child.name) {
        matchedChildCollectionKey = child.key;
        break;
      }
    }
  }
  return { libraryId: matchedLibId, collectionId: matchedChildCollectionKey };
}
async function exportCollection(collectionId, libraryId, bibFormat = "betterbibtex") {
  const url_path = `/better-bibtex/collection?/${libraryId}/${collectionId}.${bibFormat}`;
  const url = `http://127.0.0.1:23119/better-bibtex/collection?/${libraryId}/${collectionId}.${bibFormat}`;
  const options = {
    hostname: "localhost",
    port: 23119,
    path: url_path,
    method: "GET",
    headers: {
      "Content-Type": "application/json"
    }
  };
  const responseStr = await makeHttpRequest(options);
  const responseJson = JSON.parse(responseStr);
  return responseJson;
}
async function exportItems(citeKeys, translator, libraryID) {
  const jsonRpcData = {
    jsonrpc: "2.0",
    method: "item.export",
    params: [citeKeys, translator, libraryID]
  };
  const options = {
    hostname: "localhost",
    port: 23119,
    path: "/better-bibtex/json-rpc",
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": JSON.stringify(jsonRpcData).length
    }
  };
  const responseStr = await makeHttpRequest(options, JSON.stringify(jsonRpcData));
  const responseJson = JSON.parse(responseStr);
  const result = responseJson.result;
  try {
    return result[2];
  } catch (e) {
    return "[]";
  }
}
async function attachments(citeKey) {
  const jsonRpcData = {
    jsonrpc: "2.0",
    method: "item.attachments",
    params: [citeKey]
  };
  const options = {
    hostname: "localhost",
    port: 23119,
    path: "/better-bibtex/json-rpc",
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": JSON.stringify(jsonRpcData).length
    }
  };
  const responseStr = await makeHttpRequest(options, JSON.stringify(jsonRpcData));
  const responseJson = JSON.parse(responseStr);
  return responseJson.result;
}
async function exportCollectionPath(collectionPath, bibFormat = "betterbibtex") {
  try {
    const coll = await locateCollection(collectionPath);
    const exported_collection = await exportCollection(coll.collectionId, coll.libraryId, bibFormat);
    return exported_collection;
  } catch (error) {
    console.error("Error:", error);
  }
}
async function collectionCitekeysTitles(collectionPath) {
  const resultJson = await exportCollectionPath(collectionPath, "json");
  const result_keys_title = resultJson.map((item) => {
    return { "id": item.id, "title": item.title };
  });
  return result_keys_title;
}

// CitationSuggest.ts
var CitationSuggest = class extends import_obsidian.EditorSuggest {
  constructor(app, plugin) {
    super(app);
    this.app = app;
    this.plugin = plugin;
    this.justCompleted = false;
  }
  onTrigger(cursor, editor, file) {
    var _a, _b;
    if (this.justCompleted) {
      this.justCompleted = false;
      return null;
    }
    const triggerPhrase = "@";
    const startPos = ((_a = this.context) == null ? void 0 : _a.start) || {
      line: cursor.line,
      ch: cursor.ch - triggerPhrase.length
    };
    const lineToCursor = editor.getRange(
      { line: startPos.line, ch: 0 },
      { line: startPos.line, ch: cursor.ch }
    );
    if (lineToCursor.lastIndexOf("[") == -1) {
      return null;
    } else {
      if (lineToCursor.lastIndexOf("[") < lineToCursor.lastIndexOf("]")) {
        return null;
      } else {
      }
      ;
    }
    const OpenBracketToCursor = lineToCursor.substring(lineToCursor.lastIndexOf("[") + 1);
    const precedingChar = editor.getRange(
      { line: startPos.line, ch: cursor.ch - 1 },
      { line: startPos.line, ch: cursor.ch }
    );
    const followingChar = editor.getRange(
      { line: startPos.line, ch: cursor.ch },
      { line: startPos.line, ch: cursor.ch + 1 }
    );
    if (!OpenBracketToCursor.startsWith("@")) {
      return null;
    }
    if (precedingChar == " " || precedingChar == ";") {
      return null;
    }
    const LastAtSignToCursor = OpenBracketToCursor.substring(OpenBracketToCursor.lastIndexOf("@") + 1);
    const LastAtSignLinePos = lineToCursor.lastIndexOf("@");
    const queryStartPos = ((_b = this.context) == null ? void 0 : _b.start) || {
      line: cursor.line,
      ch: LastAtSignLinePos
    };
    const noteFile = file;
    const frontMatter = this.app.metadataCache.getFileCache(noteFile).frontmatter;
    this.zotero_collection = frontMatter.zotero_collection;
    const query = LastAtSignToCursor;
    return {
      start: queryStartPos,
      end: cursor,
      query
    };
  }
  async getSuggestions(context) {
    const suggestions = await collectionCitekeysTitles(this.zotero_collection);
    if (suggestions.length) {
      return suggestions.filter(
        (item) => item["id"].startsWith(context.query)
      );
    }
    return [{ label: context.query }];
  }
  renderSuggestion(suggestion, el) {
    el.setText("@" + suggestion["id"]);
    el.innerHTML += "<br>";
    el.append(suggestion["title"]);
  }
  selectSuggestion(suggestion, event) {
    const { editor } = this.context;
    const precedingChar = editor.getRange(
      { line: this.context.start.line, ch: this.context.start.ch - 1 },
      { line: this.context.start.line, ch: this.context.start.ch }
    );
    const followingChar = editor.getRange(
      { line: this.context.start.line, ch: this.context.end.ch },
      { line: this.context.start.line, ch: this.context.end.ch + 1 }
    );
    const suggStr = "@" + suggestion.id;
    let cursorEndPos = null;
    if (followingChar == "]") {
      cursorEndPos = this.context.start.ch + suggStr.length + 1;
    } else {
      cursorEndPos = this.context.start.ch + suggStr.length;
    }
    editor.replaceRange(suggStr, this.context.start, { "line": this.context.end.line, "ch": this.context.end.ch });
    editor.setCursor({ "line": this.context.start.line, "ch": cursorEndPos });
    this.justCompleted = true;
  }
};

// ReferencesView.ts
var import_obsidian2 = require("obsidian");
var ReferencesViewType = "ReferencesView";
var ReferencesView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.processReferences = async () => {
      const refs = await this.plugin.processReferences();
      this.setViewContent(await this.renderReferences(refs));
    };
    this.plugin = plugin;
    this.contentEl.addClass("bibcite-references");
    this.setNoContentMessage();
    this.addAction("refresh-cw", "Refresh References", () => {
      this.processReferences();
    });
  }
  setViewContent(bib) {
    this.contentEl.empty();
    this.button = this.contentEl.createEl("button", { text: "Refresh Bibiography" });
    this.button.onclick = (e) => {
      this.processReferences();
    };
    if (!bib) {
      this.setNoContentMessage();
    } else {
      this.contentEl.append(bib);
    }
  }
  setNoContentMessage() {
    this.setMessage("No citations found in the current document.");
  }
  setMessage(message) {
    this.contentEl.empty();
    this.button = this.contentEl.createEl("button", { text: "Refresh Bibiography" });
    this.button.onclick = (e) => {
      this.processReferences();
    };
    this.contentEl.createDiv({
      cls: "pane-empty",
      text: message
    });
  }
  getViewType() {
    return ReferencesViewType;
  }
  getDisplayText() {
    return "References";
  }
  getIcon() {
    return "graduation-cap";
  }
  async renderReferences(refsArray) {
    const containerDiv = document.createElement("div");
    const refData = JSON.parse(await exportItems(refsArray, "json", "ENT"));
    console.log(refsArray);
    for (const item of refsArray) {
      const itemDiv = document.createElement("div");
      itemDiv.classList.add("reference-div");
      const itemData = refData.flat(1).filter((r) => r["id"] == item)[0];
      itemData["attachments"] = await attachments(item);
      const itemAttachments = itemData["attachments"].filter((attach) => attach.path != false);
      itemDiv.innerHTML += `<div class="reference-citekey">@${itemData["id"]}<div>`;
      if (itemAttachments.length) {
        const linkAttachment = itemAttachments[0]["open"];
        itemDiv.innerHTML += `<div class="reference-title"><a href='${linkAttachment}'>${itemData["title"]}</a></div>`;
      } else {
        itemDiv.innerHTML += `<div class="reference-title">${itemData["title"]}</div>`;
      }
      const journal = itemData["container-title-short"] != "" ? itemData["container-title-short"] : itemData["container-title"];
      const issueDate = itemData["issued"]["date-parts"][0][0] != void 0 ? itemData["issued"]["date-parts"][0][0] : "";
      itemDiv.innerHTML += `<div class="reference-journal">${journal} ${issueDate}</div>`;
      containerDiv.appendChild(itemDiv);
    }
    return containerDiv;
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var BibcitePlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.processReferences = async () => {
      const { settings, view } = this;
      const activeView = this.app.workspace.getActiveFileView();
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        try {
          const fileContent = await this.app.vault.cachedRead(activeView.file);
          const cache = this.app.metadataCache.fileCache[activeFile.path];
          const re = /\[(@[a-zA-Z0-9_-]+[ ]*;?[ ]*)+\]/g;
          const matches = fileContent.match(re).map((item) => item.slice(1, -1).split(";").map((i) => i.trim().replace("@", "")));
          const matches_unique = new Set(matches.flat(1));
          return [...matches_unique];
        } catch (e) {
          console.error(e);
        }
      } else {
        return [];
      }
      ;
    };
  }
  async onload() {
    console.log("Loading Bibcite plugin.");
    await this.loadSettings();
    this.registerEditorSuggest(new CitationSuggest(this.app, this));
    this.registerView(
      ReferencesViewType,
      (leaf) => new ReferencesView(leaf, this)
    );
    this.addCommand({
      id: "show-references-view",
      name: "Show References",
      callback: async () => {
        this.initLeaf();
      }
    });
    await this.initLeaf();
  }
  onunload() {
    this.app.workspace.getLeavesOfType(ReferencesViewType).forEach((leaf) => leaf.detach());
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(ReferencesViewType);
    if (!(leaves == null ? void 0 : leaves.length))
      return null;
    return leaves[0].view;
  }
  async initLeaf() {
    if (this.view)
      return this.revealLeaf();
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: ReferencesViewType
    });
    this.revealLeaf();
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (activeView) {
      this.processReferences();
    }
  }
  revealLeaf() {
    const leaves = this.app.workspace.getLeavesOfType(ReferencesViewType);
    if (!(leaves == null ? void 0 : leaves.length))
      return;
    this.app.workspace.revealLeaf(leaves[0]);
  }
};
//# sourceMappingURL=data:application/json;base64,
