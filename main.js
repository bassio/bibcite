/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BibcitePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// CitationSuggest.ts
var import_obsidian = require("obsidian");
var CitationSuggest = class extends import_obsidian.EditorSuggest {
  constructor(app, plugin) {
    super(app);
    this.app = app;
    this.plugin = plugin;
    this.justCompleted = false;
  }
  onTrigger(cursor, editor, file) {
    var _a;
    if (this.justCompleted) {
      this.justCompleted = false;
      return null;
    }
    const triggerPhrase = "[@";
    const startPos = ((_a = this.context) == null ? void 0 : _a.start) || {
      line: cursor.line,
      ch: cursor.ch - triggerPhrase.length
    };
    return {
      start: startPos,
      end: cursor,
      query: editor.getRange(startPos, cursor).substring(triggerPhrase.length)
    };
  }
  getSuggestions(context) {
    const suggestions = this.getDateSuggestions(context);
    if (suggestions.length) {
      return suggestions;
    }
    return [{ label: context.query }];
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var BibcitePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEditorSuggest(new CitationSuggest(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
